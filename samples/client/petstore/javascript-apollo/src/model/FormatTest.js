/**
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FormatTest model module.
 * @module model/FormatTest
 * @version 1.0.0
 */
class FormatTest {
    /**
     * @member {Number} integer
     * @type {Number}
     */
    integer;
    /**
     * @member {Number} int32
     * @type {Number}
     */
    int32;
    /**
     * @member {Number} int64
     * @type {Number}
     */
    int64;
    /**
     * @member {Number} number
     * @type {Number}
     */
    number;
    /**
     * @member {Number} float
     * @type {Number}
     */
    float;
    /**
     * @member {Number} double
     * @type {Number}
     */
    double;
    /**
     * @member {Number} decimal
     * @type {Number}
     */
    decimal;
    /**
     * @member {String} string
     * @type {String}
     */
    string;
    /**
     * @member {Blob} byte
     * @type {Blob}
     */
    byte;
    /**
     * @member {File} binary
     * @type {File}
     */
    binary;
    /**
     * @member {Date} date
     * @type {Date}
     */
    date;
    /**
     * @member {Date} dateTime
     * @type {Date}
     */
    dateTime;
    /**
     * @member {String} uuid
     * @type {String}
     */
    uuid;
    /**
     * @member {String} password
     * @type {String}
     */
    password;
    /**
     * @member {String} pattern_with_digits
     * @type {String}
     */
    pattern_with_digits;
    /**
     * @member {String} pattern_with_digits_and_delimiter
     * @type {String}
     */
    pattern_with_digits_and_delimiter;

    

    /**
     * Constructs a new <code>FormatTest</code>.
     * @alias module:model/FormatTest
     * @param number {Number} 
     * @param _byte {Blob} 
     * @param date {Date} 
     * @param password {String} 
     */
    constructor(number, _byte, date, password) { 
        
        FormatTest.initialize(this, number, _byte, date, password);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, number, _byte, date, password) { 
        obj['number'] = number;
        obj['byte'] = _byte;
        obj['date'] = date;
        obj['password'] = password;
    }

    /**
     * Constructs a <code>FormatTest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FormatTest} obj Optional instance to populate.
     * @return {module:model/FormatTest} The populated <code>FormatTest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FormatTest();

            if (data.hasOwnProperty('integer')) {
                obj['integer'] = ApiClient.convertToType(data['integer'], 'Number');
            }
            if (data.hasOwnProperty('int32')) {
                obj['int32'] = ApiClient.convertToType(data['int32'], 'Number');
            }
            if (data.hasOwnProperty('int64')) {
                obj['int64'] = ApiClient.convertToType(data['int64'], 'Number');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('float')) {
                obj['float'] = ApiClient.convertToType(data['float'], 'Number');
            }
            if (data.hasOwnProperty('double')) {
                obj['double'] = ApiClient.convertToType(data['double'], 'Number');
            }
            if (data.hasOwnProperty('decimal')) {
                obj['decimal'] = ApiClient.convertToType(data['decimal'], 'Number');
            }
            if (data.hasOwnProperty('string')) {
                obj['string'] = ApiClient.convertToType(data['string'], 'String');
            }
            if (data.hasOwnProperty('byte')) {
                obj['byte'] = ApiClient.convertToType(data['byte'], 'Blob');
            }
            if (data.hasOwnProperty('binary')) {
                obj['binary'] = ApiClient.convertToType(data['binary'], File);
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('dateTime')) {
                obj['dateTime'] = ApiClient.convertToType(data['dateTime'], 'Date');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('pattern_with_digits')) {
                obj['pattern_with_digits'] = ApiClient.convertToType(data['pattern_with_digits'], 'String');
            }
            if (data.hasOwnProperty('pattern_with_digits_and_delimiter')) {
                obj['pattern_with_digits_and_delimiter'] = ApiClient.convertToType(data['pattern_with_digits_and_delimiter'], 'String');
            }
        }
        return obj;
    }
}



export default FormatTest;

